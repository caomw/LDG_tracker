function [outclass resp] = svmclassify_my(svmStruct,sample, varargin)
%SVMCLASSIFY Classify data using a support vector machine
%   GROUP = SVMCLASSIFY(SVMSTRUCT, TEST) classifies each row in TEST using
%   the support vector machine classifier structure SVMSTRUCT created
%   using SVMTRAIN, and returns the predicted class level GROUP. TEST must
%   have the same number of columns as the data used to train the
%   classifier in SVMTRAIN. GROUP indicates the group to which each row of
%   TEST is assigned.
%
%   GROUP = SVMCLASSIFY(...,'SHOWPLOT',true) plots the test data TEST on
%   the figure created using the SHOWPLOT option in SVMTRAIN.
%
%   Example:
%       % Load the data and select features for classification
%       load fisheriris
%       X = [meas(:,1), meas(:,2)];
%       % Extract the Setosa class
%       Y = nominal(ismember(species,'setosa'));
%       % Randomly partitions observations into a training set and a test
%       % set using stratified holdout
%       P = cvpartition(Y,'Holdout',0.20);
%       % Use a linear support vector machine classifier
%       svmStruct = svmtrain(X(P.training,:),Y(P.training),'showplot',true);
%       C = svmclassify(svmStruct,X(P.test,:),'showplot',true);
%       err_rate = sum(Y(P.test)~= C)/P.TestSize % mis-classification rate
%       conMat = confusionmat(Y(P.test),C) % the confusion matrix
%
%   See also SVMTRAIN, NAIVEBAYES, CLASSREGTREE, CLASSIFY, TREEBAGGER

%   Copyright 2004-2010 The MathWorks, Inc.
%   $Revision: 1.1.12.11.14.2 $  $Date: 2011/03/17 22:26:03 $

%   References:
%
%     [1] Cristianini, N., Shawe-Taylor, J An Introduction to Support
%         Vector Machines, Cambridge University Press, Cambridge, UK. 2000.
%         http://www.support-vector.net
%     [2] Kecman, V, Learning and Soft Computing,
%         MIT Press, Cambridge, MA. 2001.
%     [3] Suykens, J.A.K., Van Gestel, T., De Brabanter, J., De Moor, B.,
%         Vandewalle, J., Least Squares Support Vector Machines,
%         World Scientific, Singapore, 2002.


% set defaults
plotflag = false;

% check inputs
error(nargchk(2, Inf, nargin, 'struct'));

% deal with struct input case
if ~isstruct(svmStruct)
    error('Bioinfo:svmclassify:TwoInputsNoStruct','The first input should be a struct generated by SVMTRAIN.');
end

if ~isnumeric(sample) || ndims(sample) > 2
    error('Bioinfo:svmclassify:BadSample','TEST must be a numeric matrix.');
end

if size(sample,2)~=size(svmStruct.SupportVectors,2)
    error('Bioinfo:svmclassify:TestSizeMismatch','The number of columns in TEST and training data must be equal.');
end

% deal with the various inputs
if nargin > 2
    if rem(nargin,2) == 1
        error('Bioinfo:svmclassify:IncorrectNumberOfArguments','Incorrect number of arguments.');
    end
    okargs = {'showplot','-compilerhelper'};
    for j=1:2:nargin-2
        pname = varargin{j};
        pval = varargin{j+1};
        k = find(strncmpi(pname, okargs,numel(pname)));
        if isempty(k)
            error('Bioinfo:svmclassify:UnknownParameterName','Unknown parameter name: %s.', pname);
        elseif length(k)>1
            error('Bioinfo:svmclassify:AmbiguousParameterName','Ambiguous parameter name: %s.', pname);
        else
            switch(k)
                case 1 % plotflag
                    plotflag = bioinfoprivate.opttf(pval,okargs{k},mfilename);
                case 2 % help the compiler find required function handles by including svmtrain
                    svmtrain(eye(2),[1 0]);
            end
        end
    end
end

groupnames = svmStruct.GroupNames;

% check group is a vector -- though char input is special...
if ~isvector(groupnames) && ~ischar(groupnames)
    error('Bioinfo:svmclassify:GroupNotVector','TEST must be a vector or a character array.');
end

% grp2idx sorts a numeric grouping var ascending, and a string grouping
% var by order of first occurrence
[~,groupString,glevels] = grp2idx(groupnames);  

% do the classification
if ~isempty(sample)
    % shift and scale the data if necessary:
    sampleOrig = sample;
    if ~isempty(svmStruct.ScaleData)
        for c = 1:size(sample, 2)
            sample(:,c) = svmStruct.ScaleData.scaleFactor(c) * ...
                (sample(:,c) +  svmStruct.ScaleData.shift(c));
        end
    end

    try
        [outclass resp] = svmdecision_my(sample,svmStruct);
    catch ME
        error('Bioinfo:svmclassify:ClassifyFailed','An error was encountered during classification.\n%s', ME.message);
    end
    if plotflag

        if isempty(svmStruct.FigureHandles)
            warning('Bioinfo:svmclassify:NoTrainingFigure','No figure was created during SVMTRAIN so the showplot argument will be set false.');

        else
            try
                hAxis = svmStruct.FigureHandles{1};
                hLines = svmStruct.FigureHandles{2};
                hSV = svmStruct.FigureHandles{3};
                % unscale the data for plotting purposes
                [~,hClassLines] = svmplotdata(sampleOrig,outclass,hAxis); 
                trainingString = strcat(cellstr(groupString),' (training)');
                sampleString = strcat(cellstr(groupString),' (classified)');
                legend([hLines(1),hClassLines(1),hLines(2),hClassLines(2),hSV],...
                    {trainingString{1},sampleString{1},...
                    trainingString{2},sampleString{2},'Support Vectors'});
            catch ME
                warning('Bioinfo:svmclassify:DisplayFailed','An error was encountered during plotting.\n%s',ME.message);
            end
        end
    end
    outclass(outclass == -1) = 2;
    unClassified = isnan(outclass);
    outclass = glevels(outclass(~unClassified),:);
    if any(unClassified)
     
         try
            outclass = dfswitchyard('statinsertnan',unClassified,outclass);
         catch ME
             if ~isequal(ME.identifier,'stats:statinsertnan:InputTypeIncorrect')
                 rethrow(ME);
             else
                 error('Bioinfo:svmclassify:logicalwithNaN','Some observations in TEST could not be classified. This is probably caused by NaN values in the data. Logical response can''t contain missing values. You can convert the logical response into NOMINAL or double.');
             end
         end
    end

else
    outclass = [];
end